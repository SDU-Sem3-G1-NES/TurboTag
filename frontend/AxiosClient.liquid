{% if HasOperations -%}
    {% if GenerateClientInterfaces -%}
        {% if ExportTypes %}export {% endif %}interface I{{ Class }} {
        {% for operation in Operations -%}
            {% template Client.Method.Documentation %}
            {{ operation.MethodAccessModifier }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}): Promise<{% if operation.ResultType contains "PagedResult_" %}PagedResult<{{ operation.ResultType | replace: "PagedResult_", "" }}> | {{ operation.ResultType | replace: "PagedResult_", "" }}[]{% else %}{{ operation.ResultType }}{% endif %}>        {% endfor -%}}
    {%- endif %}

    {% if ExportTypes %}export {% endif %}class {{ Class }} {% if HasBaseClass %}extends {{ BaseClass }} {% endif %}{% if GenerateClientInterfaces %}implements I{{ Class }} {% endif %}{
    protected jsonParseReviver: {% if SupportsStrictNullChecks %}((key: string, value: any) => any) | undefined{% else %}(key: string, value: any) => any{% endif %} = undefined;

    {%- if HasExtendedConstructor == false %}
        constructor({% if HasConfigurationClass %}configuration: {{ ConfigurationClass }} = new {{ ConfigurationClass }}(){% endif %}) {
        {%- if HasBaseClass %}
            super({% if HasConfigurationClass %}configuration{% endif %});
        {%- endif %}
        }
    {%- endif %}
    {% if HasExtensionCode -%}

        {{ ExtensionCode }}
    {%- endif %}
    {% for operation in Operations %}

        {% template Client.Method.Documentation %}
        {{ operation.MethodAccessModifier }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters -%}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor -%}{% if UseAbortSignal -%}{% if operation.Parameters.size > 0 %}, {% endif %}signal?: AbortSignal{% else -%}{% if operation.Parameters.size > 0 %},{% endif %} cancelToken?: CancelToken{% endif %}): Promise<{% if operation.ResultType contains "PagedResult_" -%}PagedResult<{{ operation.ResultType | replace: "PagedResult_", "" }}> | {{ operation.ResultType | replace: "PagedResult_", "" }}[]{% else -%}{{ operation.ResultType }}{% endif %}> {        {% template Client.RequestUrl %}

        {% if operation.HasBody -%}
            {% template Client.RequestBody %}

        {% endif -%}
        let options_: AxiosRequestConfig = {
        {% if operation.HasBody -%}
            data: content_,
        {% endif -%}
        {% if operation.IsFile -%}
            responseType: "blob",
        {% endif -%}
        method: "{{ operation.HttpMethodUpper | upcase }}",
        url: url_,
        headers: {
        {% for parameter in operation.HeaderParameters -%}
            "{{ parameter.Name }}": {{ parameter.VariableName }} !== undefined && {{ parameter.VariableName }} !== null ? "" + {{ parameter.VariableName }} : "",
        {% endfor -%}
        {% if operation.HasContent or operation.ConsumesFormUrlEncoded -%}
            "Content-Type": "{{ operation.Consumes }}",
        {% endif -%}
        {% if operation.HasResultType and operation.HasAcceptHeaderParameterParameter == false -%}
            "Accept": "{{ operation.Produces }}"
        {% endif -%}
        },
        {%- if UseAbortSignal -%}
            signal
        {%- else -%}
            cancelToken
        {%- endif -%}
        };

        {% if UseTransformOptionsMethod -%}
            return this.transformOptions(options_).then(transformedOptions_ => {
            return this.instance.request(transformedOptions_);
            }).catch((_error: any) => {
        {% else -%}
            return this.instance.request(options_).catch((_error: any) => {
        {% endif -%}
        if (isAxiosError(_error) && _error.response) {
        return _error.response;
        } else {
        throw _error;
        }
        }).then((_response: AxiosResponse) => {
        {% if UseTransformResultMethod -%}
            return this.transformResult(url_, _response, (_response: AxiosResponse) => this.process{{ operation.ActualOperationNameUpper }}(_response));
        {% else -%}
            return this.process{{ operation.ActualOperationNameUpper }}(_response);
        {% endif -%}
        });
        }

    protected process{{ operation.ActualOperationNameUpper }}(response: AxiosResponse): Promise<{% if operation.ResultType == "void" -%}void{% elsif operation.ResultType contains "PagedResult_" -%}PagedResult<{{ operation.ResultType | replace: "PagedResult_", "" }}> | {{ operation.ResultType | replace: "PagedResult_", "" }}[]{% else -%}{{ operation.ResultType }}{% endif %}> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
        for (const k in response.headers) {
            if (response.headers.hasOwnProperty(k)) {
                _headers[k] = response.headers[k];
            }
        }
    }
    if (status === 200) {
        {% if operation.ResultType == "void" -%}
        return Promise.resolve<void>(null as any);
        {% else -%}
        const _responseText = response.data;
        let result200: any = null;
        let resultData200 = _responseText;
        {% if operation.ResultType contains "PagedResult_" -%}
        if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
                result200!.push({{ operation.ResultType | replace: "PagedResult_", "" }}.fromJS(item));
        } else if (isPagedResult<{{ operation.ResultType | replace: "PagedResult_", "" }}>(resultData200)) {
            result200 = resultData200 as PagedResult<{{ operation.ResultType | replace: "PagedResult_", "" }}>;
        } else {
            result200 = <any>null;
        }
        {% elsif operation.ResultType == "boolean" -%}
        result200 = resultData200 as boolean;
        {% elsif operation.ResultType == "string" -%}
        result200 = resultData200 as string;
        {% elsif operation.ResultType == "number" -%}
        result200 = resultData200 as number;
        {% else -%}
        result200 = {{ operation.ResultType }}.fromJS(resultData200);
        {% endif %}
        return Promise.resolve<{% if operation.ResultType contains "PagedResult_" -%}PagedResult<{{ operation.ResultType | replace: "PagedResult_", "" }}> | {{ operation.ResultType | replace: "PagedResult_", "" }}[]{% else -%}{{ operation.ResultType }}{% endif %}>(result200);
        {% endif %}
    } else if (status !== 200 && status !== 204) {
        const _responseText = response.data;
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
    }
    return Promise.resolve<{% if operation.ResultType == "void" -%}void{% elsif operation.ResultType contains "PagedResult_" -%}PagedResult<{{ operation.ResultType | replace: "PagedResult_", "" }}> | {{ operation.ResultType | replace: "PagedResult_", "" }}[]{% else -%}{{ operation.ResultType }}{% endif %}>(null as any);
}
    {% endfor -%}
    }
{%- endif %}
